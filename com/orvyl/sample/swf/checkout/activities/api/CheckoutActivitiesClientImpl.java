/*
 * This code was generated by AWS Flow Framework Annotation Processor.
 * Refer to Amazon Simple Workflow Service documentation at http://aws.amazon.com/documentation/swf 
 *
 * Any changes made directly to this file will be lost when 
 * the code is regenerated.
 */
 package com.orvyl.sample.swf.checkout.activities.api;

import com.amazonaws.services.simpleworkflow.flow.ActivitiesClientBase;
import com.amazonaws.services.simpleworkflow.flow.ActivitySchedulingOptions;
import com.amazonaws.services.simpleworkflow.flow.DataConverter;
import com.amazonaws.services.simpleworkflow.flow.core.Promise;
import com.amazonaws.services.simpleworkflow.flow.generic.GenericActivityClient;
import com.amazonaws.services.simpleworkflow.model.ActivityType;

public class CheckoutActivitiesClientImpl extends ActivitiesClientBase implements CheckoutActivitiesClient {

	public CheckoutActivitiesClientImpl() {
        this(null, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }

    public CheckoutActivitiesClientImpl(GenericActivityClient genericClient) {
        this(genericClient, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }
    
    public CheckoutActivitiesClientImpl(GenericActivityClient genericClient, 
            DataConverter dataConverter, ActivitySchedulingOptions schedulingOptions) {
            
        super(genericClient, dataConverter, schedulingOptions);
    }
    
    @Override
    public final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> verifyOrder(com.orvyl.sample.swf.checkout.activities.api.domain.Order order) {
        return verifyOrderImpl(Promise.asPromise(order), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> verifyOrder(com.orvyl.sample.swf.checkout.activities.api.domain.Order order, Promise<?>... waitFor) {
        return verifyOrderImpl(Promise.asPromise(order), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> verifyOrder(com.orvyl.sample.swf.checkout.activities.api.domain.Order order, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return verifyOrderImpl(Promise.asPromise(order), optionsOverride, waitFor);
    }

    @Override
    public final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> verifyOrder(Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> order) {
        return verifyOrderImpl(order, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> verifyOrder(Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> order, Promise<?>... waitFor) {
        return verifyOrderImpl(order, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> verifyOrder(Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> order, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return verifyOrderImpl(order, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> verifyOrderImpl(final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> order, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType activityType = new ActivityType();
		activityType.setName("CheckoutActivities.verifyOrder");
		activityType.setVersion("1.0-SNAPSHOT");

        Promise[] _input_ = new Promise[1];
        _input_[0] = order;

        return (Promise)scheduleActivity(activityType, _input_, optionsOverride, com.orvyl.sample.swf.checkout.activities.api.domain.Order.class, waitFor);
    }

    @Override
    public final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Receipt> chargeCreditCard(com.orvyl.sample.swf.checkout.activities.api.domain.Order order) {
        return chargeCreditCardImpl(Promise.asPromise(order), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Receipt> chargeCreditCard(com.orvyl.sample.swf.checkout.activities.api.domain.Order order, Promise<?>... waitFor) {
        return chargeCreditCardImpl(Promise.asPromise(order), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Receipt> chargeCreditCard(com.orvyl.sample.swf.checkout.activities.api.domain.Order order, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return chargeCreditCardImpl(Promise.asPromise(order), optionsOverride, waitFor);
    }

    @Override
    public final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Receipt> chargeCreditCard(Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> order) {
        return chargeCreditCardImpl(order, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Receipt> chargeCreditCard(Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> order, Promise<?>... waitFor) {
        return chargeCreditCardImpl(order, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Receipt> chargeCreditCard(Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> order, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return chargeCreditCardImpl(order, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Receipt> chargeCreditCardImpl(final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> order, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType activityType = new ActivityType();
		activityType.setName("CheckoutActivities.chargeCreditCard");
		activityType.setVersion("1.0-SNAPSHOT");

        Promise[] _input_ = new Promise[1];
        _input_[0] = order;

        return (Promise)scheduleActivity(activityType, _input_, optionsOverride, com.orvyl.sample.swf.checkout.activities.api.domain.Receipt.class, waitFor);
    }

    @Override
    public final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.ShipOrderTxn> shipOrder(com.orvyl.sample.swf.checkout.activities.api.domain.Order order) {
        return shipOrderImpl(Promise.asPromise(order), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.ShipOrderTxn> shipOrder(com.orvyl.sample.swf.checkout.activities.api.domain.Order order, Promise<?>... waitFor) {
        return shipOrderImpl(Promise.asPromise(order), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.ShipOrderTxn> shipOrder(com.orvyl.sample.swf.checkout.activities.api.domain.Order order, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return shipOrderImpl(Promise.asPromise(order), optionsOverride, waitFor);
    }

    @Override
    public final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.ShipOrderTxn> shipOrder(Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> order) {
        return shipOrderImpl(order, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.ShipOrderTxn> shipOrder(Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> order, Promise<?>... waitFor) {
        return shipOrderImpl(order, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.ShipOrderTxn> shipOrder(Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> order, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return shipOrderImpl(order, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<com.orvyl.sample.swf.checkout.activities.api.domain.ShipOrderTxn> shipOrderImpl(final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> order, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType activityType = new ActivityType();
		activityType.setName("CheckoutActivities.shipOrder");
		activityType.setVersion("1.0-SNAPSHOT");

        Promise[] _input_ = new Promise[1];
        _input_[0] = order;

        return (Promise)scheduleActivity(activityType, _input_, optionsOverride, com.orvyl.sample.swf.checkout.activities.api.domain.ShipOrderTxn.class, waitFor);
    }

    @Override
    public final Promise<Void> recordCompletion(com.orvyl.sample.swf.checkout.activities.api.domain.Order order, com.orvyl.sample.swf.checkout.activities.api.domain.Receipt receipt, com.orvyl.sample.swf.checkout.activities.api.domain.ShipOrderTxn shipOrderTxn) {
        return recordCompletionImpl(Promise.asPromise(order), Promise.asPromise(receipt), Promise.asPromise(shipOrderTxn), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> recordCompletion(com.orvyl.sample.swf.checkout.activities.api.domain.Order order, com.orvyl.sample.swf.checkout.activities.api.domain.Receipt receipt, com.orvyl.sample.swf.checkout.activities.api.domain.ShipOrderTxn shipOrderTxn, Promise<?>... waitFor) {
        return recordCompletionImpl(Promise.asPromise(order), Promise.asPromise(receipt), Promise.asPromise(shipOrderTxn), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> recordCompletion(com.orvyl.sample.swf.checkout.activities.api.domain.Order order, com.orvyl.sample.swf.checkout.activities.api.domain.Receipt receipt, com.orvyl.sample.swf.checkout.activities.api.domain.ShipOrderTxn shipOrderTxn, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return recordCompletionImpl(Promise.asPromise(order), Promise.asPromise(receipt), Promise.asPromise(shipOrderTxn), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> recordCompletion(Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> order, Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Receipt> receipt, Promise<com.orvyl.sample.swf.checkout.activities.api.domain.ShipOrderTxn> shipOrderTxn) {
        return recordCompletionImpl(order, receipt, shipOrderTxn, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> recordCompletion(Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> order, Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Receipt> receipt, Promise<com.orvyl.sample.swf.checkout.activities.api.domain.ShipOrderTxn> shipOrderTxn, Promise<?>... waitFor) {
        return recordCompletionImpl(order, receipt, shipOrderTxn, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> recordCompletion(Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> order, Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Receipt> receipt, Promise<com.orvyl.sample.swf.checkout.activities.api.domain.ShipOrderTxn> shipOrderTxn, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return recordCompletionImpl(order, receipt, shipOrderTxn, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> recordCompletionImpl(final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Order> order, final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.Receipt> receipt, final Promise<com.orvyl.sample.swf.checkout.activities.api.domain.ShipOrderTxn> shipOrderTxn, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType activityType = new ActivityType();
		activityType.setName("CheckoutActivities.recordCompletion");
		activityType.setVersion("1.0-SNAPSHOT");

        Promise[] _input_ = new Promise[3];
        _input_[0] = order;
        _input_[1] = receipt;
        _input_[2] = shipOrderTxn;

        return (Promise)scheduleActivity(activityType, _input_, optionsOverride, Void.class, waitFor);
    }

}